name: Build documentation

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pages: write

env:
  INSTANCE: 'Writerside/j'
  DOCKER_VERSION: '243.22562'
  ALGOLIA_APP_NAME: 'KDOVBDVHN8'
  ALGOLIA_INDEX_NAME: 'prod_writerside_docs'
  CONFIG_JSON_PRODUCT: 'Jakezo-docs'
  CONFIG_JSON_VERSION: '1.0'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          INSTANCE=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            artifacts/${{ steps.define-ids.outputs.artifact }}
            artifacts/report.json
            artifacts/${{ steps.define-ids.outputs.algolia_artifact }}
          retention-days: 7
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir

      # ✅ Utterances <div> 강제 삽입
      - name: Force Insert Utterances div outside <article>
        run: |
          echo "🔧 Ensuring <div id='utterances-comments'></div> is outside <article>..."
          find dir -type f -name '*.html' | while read file; do
            # <aside> 태그 있는 경우, 그 바로 위에 <div> 삽입
            if grep -q '<aside' "$file"; then
              sed -i '/<aside/i \
              <div id="utterances-comments"></div>' "$file"
              echo "✅ Utterances <div> correctly placed before <aside> in $file"
            else
              # <aside> 태그가 없는 경우, <body> 끝나기 전에 삽입
              sed -i '/<\/body>/i \
              <div id="utterances-comments"></div>' "$file"
              echo "⚠️ No <aside> found, placing <div> before </body> in $file"
            fi
          done

      # ✅ Utterances <script> 강제 삽입 (무조건 <body> 끝 부분)
      - name: Force Insert Utterances script at the end of body
        run: |
          echo "🔧 Ensuring Utterances <script> is at the end of <body>..."
          find dir -type f -name '*.html' | while read file; do
            # 기존 <script> 삭제 후 <body> 끝나기 전에 삽입
            sed -i '/<script src="https:\/\/utteranc.es\/client.js"/d' "$file"
            sed -i '/<\/body>/i \
            <script src="https://utteranc.es/client.js" repo="Jakezo/Jakezo-docs" issue-term="pathname" theme="github-dark" crossorigin="anonymous" async></script>' "$file"
            echo "✅ Utterances <script> correctly placed before </body> in $file"
          done

      # ✅ 디버깅: 올바른 위치에 들어갔는지 확인
      - name: Debug Utterances Placement
        run: |
          echo "🔍 Checking Utterances placement in all HTML files..."
          
          find dir -type f -name '*.html' | while read file; do
            echo "🔍 Checking file: $file"

            # <div id="utterances-comments"> 가 <aside> 위 또는 <body> 끝나기 전에 있는지 확인
            if grep -B 5 '<aside' "$file" | grep -q '<div id="utterances-comments"></div>'; then
              echo "✅ Utterances <div> correctly placed before <aside> in $file"
            elif grep -A 5 '</body>' "$file" | grep -q '<div id="utterances-comments"></div>'; then
              echo "✅ Utterances <div> correctly placed before </body> in $file"
            else
              echo "❌ Utterances <div> NOT found in the correct location in $file"
            fi

            # <script> 태그가 <body> 끝나기 전에 있는지 확인
            if grep -A 5 '</body>' "$file" | grep -q '<script src="https://utteranc.es/client.js"'; then
              echo "✅ Utterances <script> correctly placed before </body> in $file"
            else
              echo "❌ Utterances <script> NOT found before </body> in $file"
            fi

          done


      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  publish-indexes:
    needs: [build, test, deploy]
    runs-on: ubuntu-latest
    container:
      image: registry.jetbrains.team/p/writerside/builder/algolia-publisher:2.0.32-3
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts
      - name: Unzip Algolia artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.algolia_artifact }}" -d algolia-indexes

      # ✅ 기존 데이터 삭제하는 단계 추가 (clearObjects API 활용)
      - name: Clear existing Algolia Index
        run: |
          if [ -z "${{ secrets.ALGOLIA_ADMIN_API_KEY }}" ]; then
            echo "ALGOLIA_ADMIN_API_KEY secret is not set in GitHub Secrets"
            exit 1
          else
            curl -X POST \
                 -H "X-Algolia-API-Key: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}" \
                 -H "X-Algolia-Application-Id: ${{ env.ALGOLIA_APP_NAME }}" \
                 "https://${{ env.ALGOLIA_APP_NAME }}.algolia.net/1/indexes/${{ env.ALGOLIA_INDEX_NAME }}/clear"
          fi

      - name: Update Algolia Index
        run: |
          if [ -z "${{ secrets.ALGOLIA_KEY }}" ]; then
            echo "ALGOLIA_KEY secret is not set in GitHub Secrets"
            exit 1
          else
            env "algolia-key=${{ secrets.ALGOLIA_KEY }}" java -jar /opt/builder/help-publication-agent.jar \
            update-index \
            --application-name ${{ env.ALGOLIA_APP_NAME }} \
            --index-name ${{ env.ALGOLIA_INDEX_NAME }} \
            --product ${{ env.CONFIG_JSON_PRODUCT }} \
            --version ${{ env.CONFIG_JSON_VERSION }} \
            --index-directory algolia-indexes/ \
            2>&1 | tee algolia-update-index-log.txt
          fi