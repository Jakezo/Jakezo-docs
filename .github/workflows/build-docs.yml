name: Build documentation

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pages: write

env:
  INSTANCE: 'Writerside/j'
  DOCKER_VERSION: '243.22562'
  ALGOLIA_APP_NAME: 'KDOVBDVHN8'
  ALGOLIA_INDEX_NAME: 'prod_writerside_docs'
  CONFIG_JSON_PRODUCT: 'Jakezo-docs'
  CONFIG_JSON_VERSION: '1.0'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          INSTANCE=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            artifacts/${{ steps.define-ids.outputs.artifact }}
            artifacts/report.json
            artifacts/${{ steps.define-ids.outputs.algolia_artifact }}
          retention-days: 7
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir

      - name: Debug built HTML before upload
        run: |
          echo "🔍 Checking Writerside build output before upload..."

          unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d temp_dir

          echo "🔍 Checking if <nav class='navigation-links'> exists..."
          grep -rn '<nav class="navigation-links">' temp_dir || echo "❌ navigation-links NOT found in built HTML!"

          echo "🔍 Checking if Utterances <div> is in correct position..."
          grep -rn '<div id="utterances-comments"></div>' temp_dir || echo "❌ Utterances div NOT found!"

          echo "🔍 Checking if Utterances <script> is at the end of <body>..."
          grep -rn '<script src="https://utteranc.es/client.js"' temp_dir || echo "❌ Utterances script NOT found!"


      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Debug and Patch deployed HTML
        run: |
          echo "🔍 Fetching deployed HTML from GitHub Pages..."
          sleep 10  # GitHub Pages 배포 지연 방지를 위해 대기
          curl -s "https://jakezo.github.io/Jakezo-docs/algogo.html" -o deployed.html

          echo "🔍 Checking if <nav class='navigation-links'> exists in deployed HTML..."
          if grep -qi 'navigation-links' deployed.html; then
            echo "✅ navigation-links found! Inserting Utterances <div> above it..."

            # `navigation-links` 가 있는 모든 경우를 포괄하여 탐색하고 삽입
            sed -i '/<div class="navigation-links/,/<\/div>/i \
            <div id="utterances-comments"></div>' deployed.html
          
            echo "✅ Utterances <div> successfully inserted before navigation-links!"
          else
            echo "❌ navigation-links NOT found! Trying alternative placement..."

            echo "🔍 Checking if layout--scroll-element exists..."
            if grep -qi 'layout--scroll-element' deployed.html; then
              echo "✅ layout--scroll-element found! Inserting Utterances <div> below it..."
          
              sed -i '/class="layout layout--container-content layout--scroll-element"/a \
              <div id="utterances-comments"></div>' deployed.html
          
              echo "✅ Utterances <div> successfully inserted after layout--scroll-element!"
            else
              echo "❌ layout--scroll-element NOT found! Trying alternative placement..."
          
              if grep -qi 'layout--container-content layout--scroll-element' deployed.html; then
                sed -i '/class="layout layout--container-content layout--scroll-element"/i \
                <div id="utterances-comments"></div>' deployed.html
          
                echo "✅ Utterances <div> inserted before layout--container-content layout--scroll-element!"
              else
                echo "❌ No suitable layout found for insertion!"
              fi
            fi
          fi

          echo "🔍 Checking if Utterances <script> is at the end of <body>..."
          if ! grep -q '<script src="https://utteranc.es/client.js"' deployed.html; then
            sed -i '/<\/body>/i \
            <script src="https://utteranc.es/client.js" repo="Jakezo/Jakezo-docs" issue-term="pathname" theme="github-dark" crossorigin="anonymous" async></script>' deployed.html
            echo "✅ Utterances <script> successfully inserted before </body>!"
          else
            echo "✅ Utterances <script> already present in deployed HTML!"
          fi

      # ✅ 기존 Pages Artifact 삭제
      - name: Ensure jq is installed
        run: sudo apt-get install jq -y

      - name: Remove Existing Pages Artifact
        run: |
          echo "🔧 Fetching existing GitHub Pages artifact..."
          
          # 현재 실행 중인 GitHub Actions의 아티팩트 리스트에서 'github-pages' 아티팩트 ID 가져오기
          ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.MY_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | jq -r '.artifacts[] | select(.name=="github-pages") | .id')

          if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
            echo "🗑️ Removing artifact ID: $ARTIFACT_ID"
          
            # GitHub API를 사용해 해당 아티팩트 삭제 요청
            curl -X DELETE -s -H "Authorization: token ${{ secrets.MY_GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID"
          
            echo "✅ Artifact deleted successfully! Waiting 3 seconds..."
            sleep 3
          else
            echo "⚠️ No existing GitHub Pages artifact found. Skipping deletion."
          fi
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Upload Modified Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir
  publish-indexes:
    needs: [build, test, deploy]
    runs-on: ubuntu-latest
    container:
      image: registry.jetbrains.team/p/writerside/builder/algolia-publisher:2.0.32-3
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts
      - name: Unzip Algolia artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.algolia_artifact }}" -d algolia-indexes

      # ✅ 기존 데이터 삭제하는 단계 추가 (clearObjects API 활용)
      - name: Clear existing Algolia Index
        run: |
          if [ -z "${{ secrets.ALGOLIA_ADMIN_API_KEY }}" ]; then
            echo "ALGOLIA_ADMIN_API_KEY secret is not set in GitHub Secrets"
            exit 1
          else
            curl -X POST \
                 -H "X-Algolia-API-Key: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}" \
                 -H "X-Algolia-Application-Id: ${{ env.ALGOLIA_APP_NAME }}" \
                 "https://${{ env.ALGOLIA_APP_NAME }}.algolia.net/1/indexes/${{ env.ALGOLIA_INDEX_NAME }}/clear"
          fi

      - name: Update Algolia Index
        run: |
          if [ -z "${{ secrets.ALGOLIA_KEY }}" ]; then
            echo "ALGOLIA_KEY secret is not set in GitHub Secrets"
            exit 1
          else
            env "algolia-key=${{ secrets.ALGOLIA_KEY }}" java -jar /opt/builder/help-publication-agent.jar \
            update-index \
            --application-name ${{ env.ALGOLIA_APP_NAME }} \
            --index-name ${{ env.ALGOLIA_INDEX_NAME }} \
            --product ${{ env.CONFIG_JSON_PRODUCT }} \
            --version ${{ env.CONFIG_JSON_VERSION }} \
            --index-directory algolia-indexes/ \
            2>&1 | tee algolia-update-index-log.txt
          fi